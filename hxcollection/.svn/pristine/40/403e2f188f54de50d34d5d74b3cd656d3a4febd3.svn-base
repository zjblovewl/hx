<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.hxfz.dao.GeneralUserDao" >
	<!-- 获取普通用户列表 -->
	<select id="getGeneralUser" parameterType="java.util.Map" resultType="java.util.Map">
		select t.id, to_char(lockdate,'YYYY-MM-DD HH24:MI:SS') as clear_time,
	 	case when lockdate > now() then '0'
	 	else '1'
	 	end as is_lock,
	 	t.nick_name,t.phone,t.password,t.autograph,t.wallet_balance,t.wallet_pwd,sys_area.city,rd.receive_address,
		t.login_num,t.is_authentication,t.sex,t.credit,t.lock_reason,t.lock_days,
		to_char(t.register_time,'YYYY-MM-DD HH24:MI:SS')as register_time,
		to_char(t.lock_time,'YYYY-MM-DD HH24:MI:SS')as lock_time,
		to_char(t.create_time,'YYYY-MM-DD HH24:MI:SS')as create_time,
		to_char(t.update_time,'YYYY-MM-DD HH24:MI:SS')as update_time,
		to_char(t.login_time,'YYYY-MM-DD HH24:MI:SS')as login_time,
		t.del_flag,t.is_flag_nick_name,t.is_recommend,t.sort
		from (
			select u.*,ut.lockdate from hxdb.hx_user u 
			inner join (select id,lock_time + (lock_days || ' d')::interval as lockdate from hxdb.hx_user) ut 
			on ut.id=u.id
		) t
		left join hxdb.sys_area on t.city_code = sys_area.code 
		left join hxdb.hx_my_receive_address rd on t.id = rd.user_id  
		where del_flag = '0'
        <if test="nickName != null and nickName != ''">
          and t.nick_name like '%'||#{nickName}||'%'
        </if>
        <if test="phone != null and phone != ''">
          and t.phone like '%'||#{phone}||'%'
        </if>
        <if test="isAuthentication != null and isAuthentication != ''">
          and t.is_authentication like '%'||#{isAuthentication}||'%'
        </if>
        <if test="startTime != null and startTime != ''">
          and to_char(t.register_time,'YYYY-MM-DD HH24:MI:SS') > #{startTime}
        </if>
        <if test="endTime != null and endTime != ''">
          and to_char(t.register_time,'YYYY-MM-DD HH24:MI:SS') &lt;= #{endTime} 
        </if> 
        limit #{limit} offset #{offset}
    </select>
    
    <!-- 获取普通用户总数量 -->
	<select id="getGeneralUserCount" resultType="java.lang.Integer">  
	select count(*)
		from (select u.*,ut.lockdate from hxdb.hx_user u 
		inner join (select id,lock_time + (lock_days || ' d')::interval as lockdate from hxdb.hx_user) ut 
		on ut.id=u.id
		) t
		left join hxdb.sys_area on t.city_code = sys_area.code 
		left join hxdb.hx_my_receive_address rd on t.id = rd.user_id  
		where del_flag = '0'
        <if test="nickName != null and nickName != ''">
          and t.nick_name like '%'||#{nickName}||'%'
        </if>
        <if test="phone != null and phone != ''">
          and t.phone like '%'||#{phone}||'%'
        </if>
        <if test="isAuthentication != null and isAuthentication != ''">
          and t.is_authentication like '%'||#{isAuthentication}||'%'
        </if>
        <if test="startTime != null and startTime != ''">
          and to_char(t.register_time,'YYYY-MM-DD HH24:MI:SS') &gt; #{startTime} 
        </if>
        <if test="endTime != null and endTime != ''">
          and to_char(t.register_time,'YYYY-MM-DD HH24:MI:SS') &lt;= #{endTime}
        </if>
    </select>

	<!-- 新增普通用户 -->
  	<insert id="saveGeneralUser" parameterType="java.util.HashMap">	
		insert into hxdb.hx_user(id,nick_name,phone,password,create_time,register_time,is_authentication,del_flag,is_flag_nick_name) 
 		values( #{id},#{nickName},#{phone},#{password1},now(),now(),'0','0','0')
  	</insert>
  	
  	 <!-- 修改普通用户 -->
  	<update id="updateGeneralUserById" parameterType="java.util.HashMap">
  		update hxdb.hx_user set nick_name = #{nickName},password = #{password1},autograph = #{autograph},lock_time= #{lockTime},phone = #{phone},lock_reason = #{lockReason},wallet_pwd = #{walletPwd},
		lock_days = #{lockDays},city_code = #{cityCode} 
  		where id = #{id}
  	</update>
  	
  	<!-- 删除普通用户 -->
  	<update id="deleteGeneralUserById" parameterType="java.util.HashMap">
  		update hxdb.hx_user set del_flag = '1',update_time = now() 
  		where id = #{id}
  	</update>
  	
  	<!-- 逻辑批量删除普通用户 -->
  	<update id="delMoreGeneralUser" parameterType="java.util.HashMap">
  		update hxdb.hx_user set del_flag = '1',update_time = now() 
  		where id in (${id})
  	</update>
  	
  	<!-- 新增校验用户昵称是否已存在 -->
  	<select id="checkAddUser" parameterType="java.util.HashMap" resultType="java.lang.Integer">
  		select count(*) from hxdb.hx_user where del_flag = '0' and nick_name = #{nickName}
  	</select>
  	
  	
  	 <!-- 编辑校验用户昵称是否已存在 -->
  	<select id="checkEditUser" parameterType="java.util.HashMap" resultType="java.lang.Integer">
  		select count(*) from hxdb.hx_user where del_flag = '0' and nick_name = #{nickName}
  	</select>
  
  	<!-- 新增校验用户手机号是否已存在 -->
  	<select id="checkAddPhone" parameterType="java.util.HashMap" resultType="java.lang.Integer">
  		select count(*) from hxdb.hx_user where del_flag = '0' and phone = #{phone}
  	</select>
  	
  	<!-- 编辑校验用户手机号是否已存在 -->
  	<select id="checkEditPhone" parameterType="java.util.HashMap" resultType="java.lang.Integer">
  		select count(*) from hxdb.hx_user where del_flag = '0' and phone = #{phone}
  	</select>
  	
  	<!-- 获取需导出的用户信息并导出EXCEL -->
  	<select id="getExportUserList" parameterType="java.util.Map" resultType="java.util.Map">
  		select u.nick_name,u.phone,sa.city,u.wallet_balance,u.credit,
		to_char(u.register_time, 'YYYY-MM-DD HH24:MI:SS') as register_time,
		to_char(u.login_time, 'YYYY-MM-DD HH24:MI:SS') as login_time,
		(case 
			when u.is_authentication='0' then '未认证' 
		    else '已认证' end
		)as is_authentication
		from hxdb.hx_user u
		left join hxdb.sys_area sa on u.city_code = sa.code 
		where del_flag = '0'
		<if test="nickName != null and nickName != ''">
          and nick_name like '%'||#{nickName}||'%'
        </if>
        <if test="phone != null and phone != ''">
          and phone like '%'||#{phone}||'%'
        </if>
        <if test="isAuthentication != null and isAuthentication != ''">
          and is_authentication like '%'||#{isAuthentication}||'%'
        </if>
         <if test="startTime != null and startTime != ''">
          and to_char(register_time,'YYYY-MM-DD HH24:MI:SS') &gt; #{startTime} 
        </if>
        <if test="endTime != null and endTime != ''">
          and to_char(register_time,'YYYY-MM-DD HH24:MI:SS') &lt;= #{endTime}
        </if>
         
  	</select>
  	
  	<!-- 获取所有公共用户信息 -->
  	<select id="getCommonUserInfo" parameterType="java.util.Map" resultType="java.util.Map">
  		select t.id,t.nick_name,t.phone,t.password,t.autograph,t.wallet_balance,t.wallet_pwd,
			t.login_num,t.is_authentication,t.sex,t.credit,t.lock_reason,t.lock_days,
			to_char(t.register_time,'yyyy-mm-dd hh24:mi:ss')as register_time,
			to_char(t.lock_time,'yyyy-mm-dd hh24:mi:ss')as lock_time,
			to_char(t.create_time,'yyyy-mm-dd hh24:mi:ss')as create_time,
			to_char(t.update_time,'yyyy-mm-dd hh24:mi:ss')as update_time,
			to_char(t.login_time,'yyyy-mm-dd hh24:mi:ss')as login_time,
			t.del_flag,t.is_flag_nick_name,t.is_recommend,t.sort 
		from hxdb.hx_user t
		where del_flag = '0'
		limit #{limit} offset #{offset}
  	</select>
  	
  	<!-- 获取所有公共用户信息总数 -->
  	<select id="getCommonUserCount" resultType="java.lang.Integer">
  		select count(*) from hxdb.hx_user u
		where del_flag = '0'
  	</select>
  	
  	
  	<!-- 查询省市信息 -->
	<select id="queryAreaInfo" resultType="map">
		with recursive cte as
		(
		select id,code,province,city,parent from hxdb.sys_area a where
		parent='1'
		union all
		select k.id,k.code,k.province,k.city,k.parent from
		hxdb.sys_area k inner join
		cte c on c.parent = k.id
		)select
		id,code,province,city,parent from hxdb.sys_area cte where province !=''
		or city !=''
	</select>
  	
  	
</mapper>