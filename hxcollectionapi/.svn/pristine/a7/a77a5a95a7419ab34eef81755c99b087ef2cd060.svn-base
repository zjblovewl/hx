package cn.com.mobile.auction.service.impl;

import cn.com.base.constant.BaseConstant;
import cn.com.base.util.StringUtil;
import cn.com.base.vo.RequestParamVo;
import cn.com.base.vo.ResponseParamVo;
import cn.com.base.vo.auction.AuctionGoods;
import cn.com.base.vo.auction.ChildClassIfication;
import cn.com.base.vo.auction.GoodsQueryParams;
import cn.com.base.vo.auction.ParentClassIfication;
import cn.com.mobile.auction.dao.AuctionEndTimeMapper;
import cn.com.mobile.auction.dao.GoodsClassIficationMapper;
import cn.com.mobile.auction.dao.GoodsMapper;
import cn.com.mobile.auction.dao.GoodsOfferRecordMapper;
import cn.com.mobile.auction.service.AuctionMobileService;
import cn.com.model.auction.AuctionEndTime;
import cn.com.model.auction.Goods;
import cn.com.model.auction.GoodsClassIfication;
import cn.com.model.auction.GoodsOfferRecord;
import cn.com.util.DateUtil;
import cn.com.util.NumberUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * @类功能说明：拍卖业务实现层
 * @公司名称：南京华讯方舟通讯设备有限公司
 * @作者：zhoujinbing
 * @创建时间：2018/3/30 上午9:23
 * @版本：V1.0
 */
@Service
public class AuctionMobileServiceImpl implements AuctionMobileService {

    private static final Logger log = LoggerFactory.getLogger(AuctionMobileServiceImpl.class);

    private ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private BaseConstant baseConstant;

    /**
     * 大小类
     */
    @Autowired
    private GoodsClassIficationMapper goodsClassIficationMapper;

    /**
     * 拍卖场次结拍时间
     */
    @Autowired
    private AuctionEndTimeMapper auctionEndTimeMapper;

    /**
     * 拍卖
     */
    @Autowired
    private GoodsMapper goodsMapper;

    /**
     * 商品出价Mapper
     */
    @Autowired
    private GoodsOfferRecordMapper offerRecordMapper;

    @Override
    public ResponseParamVo getSizeOfClass(RequestParamVo vo) {
        try{
            Map<String,Object> bodyMap = (Map<String, Object>) vo.getBody();
            String classType = String.valueOf(bodyMap.get("classType"));
            log.info("查询大小类类型为：{}",classType);
            if(!StringUtil.isNullOrBlank(classType))
            {
                List<GoodsClassIfication> lists = goodsClassIficationMapper.selectListByClassType(classType);
                if(lists != null && lists.size() > 0)
                {
                    List<ParentClassIfication> parentClassIficationsList = getParentAndSmallList(lists);
                    Map<String,Object> resultMap = new HashMap<>();
                    resultMap.put("data",parentClassIficationsList);
                    return StringUtil.returnResponseVo(baseConstant.getRightCode(),"查询成功","","",resultMap);
                }
                else
                {
                    return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"大小类暂无数据","","","");
                }
            }
            else
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"查询大小类类型为空","","","");
            }
        }catch (Exception e)
        {
            log.error("查询大小类时异常",e.getMessage());
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"查询大小类异常","","","");
        }
    }

    @Override
    public ResponseParamVo getSession(RequestParamVo vo) {
        List<AuctionEndTime> endTimeLists = auctionEndTimeMapper.selectAll();
        if(endTimeLists != null && endTimeLists.size() > 0)
        {
            Map<String,Object> resultMap = new HashMap<>();
            resultMap.put("data",endTimeLists.get(0));
            return StringUtil.returnResponseVo(baseConstant.getRightCode(),"查询成功","","",resultMap);
        }
        else
        {
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"暂无数据","","","");
        }
    }

    @Override
    public ResponseParamVo publishAcution(RequestParamVo vo) {
        String userId = vo.getHeader().getUserId();
        if(StringUtil.isNullOrBlank(userId))
        {
            log.error("发布拍卖，用户ID为空");
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"用户ID为空","","","");
        }

        try {
            String bodyJson = objectMapper.writeValueAsString(vo.getBody()).toString();
            Goods goods = objectMapper.readValue(bodyJson,Goods.class);
            goods.setId(NumberUtil.getSysJournalNo(32,false));
            goods.setUserId(vo.getHeader().getUserId());
            goods.setGoodsType("2");//默认拍卖类型
            goods.setStatus("2");//默认上架
            goods.setFirstStepTime(new Date());
            goods.setBrowseNum(0l);
            goods.setPublishCustomer(vo.getHeader().getUserId());
            goods.setPublishTime(new Date());
            goods.setCurrentPrice(goods.getStartPrice());
            goods.setCreateTime(new Date());
            goods.setDelFlag("0");

            //大类和小类二选其一
            if(StringUtil.isNullOrBlank(goods.getSmallClassCode()) && StringUtil.isNullOrBlank(goods.getBigClassCode()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"大类和小类必须选择一个","","","");
            }

            //城市Code
            if(StringUtil.isNullOrBlank(goods.getCityCode()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"城市编码不能为空","","","");
            }

            //商品描述
            if(StringUtil.isNullOrBlank(goods.getGoodsDescription()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"描述不能为空","","","");
            }

            //起拍价和竞价
            if(goods.getStartPrice() == null || goods.getMarkupPrice() == null)
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"起拍价或竞拍价不能为空","","","");
            }

            //结拍时间
            if(StringUtil.isNullOrBlank(goods.getEndTimeStr()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"结拍时间不能为空","","","");
            }
            else
            {
                goods.setEndTime(DateUtil.getDateByFormat(goods.getEndTimeStr(),"yyyy-MM-dd HH:mm:ss"));
            }

            //图片
            if(StringUtil.isNullOrBlank(goods.getImageIds()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"图片ID不能为空","","","");
            }

            goodsMapper.insertSelective(goods);
            log.info("===============发布拍卖成功==================");

            return StringUtil.returnResponseVo(baseConstant.getRightCode(),"发布拍卖成功","","","");
        } catch (Exception e) {
            log.error("发布拍卖异常,原因为:{}",e.getMessage());
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"发布拍卖异常","","","");
        }
    }

    @Override
    public ResponseParamVo getAuctionList(RequestParamVo vo) {

        try {
            String bodyJson = objectMapper.writeValueAsString(vo.getBody()).toString();
            GoodsQueryParams queryParams = objectMapper.readValue(bodyJson,GoodsQueryParams.class);
            queryParams.setPage_num(queryParams.getPage_num() == null ? baseConstant.getPageNum() : queryParams.getPage_num());
            queryParams.setPage_size(queryParams.getPage_size() == null ? baseConstant.getPageSize() : queryParams.getPage_size());
            queryParams.setStartTime(new Date());
            queryParams.setEndTime(DateUtil.getDateAfterHour(new Date(),2));
            queryParams.setStartCreateTime((DateUtil.getDateAfterHour(new Date(),-2)));
            PageHelper.startPage(queryParams.getPage_num(),queryParams.getPage_size());
            List<AuctionGoods> auctionList = goodsMapper.getGoodsByType(queryParams);
            PageInfo<AuctionGoods> pageInfo = new PageInfo<>(auctionList);
            return StringUtil.returnResponseVo(baseConstant.getRightCode(),"查询成功","","",pageInfo);
        } catch (Exception e) {
            log.error("查询拍卖列表异常，原因为：{}",e.getMessage());
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"查询拍卖列表异常","","","");
        }
    }

    @Override
    public ResponseParamVo addGoodsOfferRecord(RequestParamVo vo) {
        try {
            String bodyJson = objectMapper.writeValueAsString(vo.getBody()).toString();
            GoodsOfferRecord goodsOfferRecord = objectMapper.readValue(bodyJson,GoodsOfferRecord.class);
            if(StringUtil.isNullOrBlank(goodsOfferRecord.getGoodsId()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"新增出价时商品ID不能为空","","","");
            }
            if(StringUtil.isNullOrBlank(goodsOfferRecord.getCustomerId()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"新增出价时出价人ID不能为空","","","");
            }
            if(StringUtil.isNullOrBlank(goodsOfferRecord.getNickName()))
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"新增出价时出价人昵称不能为空","","","");
            }
            if(goodsOfferRecord.getOfferPrice() == null)
            {
                return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"新增出价时出价不能为空","","","");
            }

            goodsOfferRecord.setId(NumberUtil.getSysJournalNo(32,false));
            goodsOfferRecord.setCreateTime(new Date());
            offerRecordMapper.insertSelective(goodsOfferRecord);
            log.info("新增出价记录成功，出价人ID:{}", goodsOfferRecord.getCustomerId());

            //修改商品当前价
//            Goods goods = new Goods();
//            goods.setCurrentPrice(goodsOfferRecord.getOfferPrice());
//            goods.setId(goodsOfferRecord.getGoodsId());
//            goods.setLastUpdateTime(new Date());
//            goodsMapper.updateByPrimaryKey(goods);
            return StringUtil.returnResponseVo(baseConstant.getRightCode(),"新增出价记录成功","","","");

        } catch (Exception e) {
            log.error("查询拍卖列表异常，原因为：{}",e.getMessage());
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"查询拍卖列表异常","","","");
        }
    }

    @Override
    public ResponseParamVo getGoodsOfferRecord(RequestParamVo vo) {
        Map<String,Object> bodyMap = (Map<String, Object>) vo.getBody();
        Integer pageNum = baseConstant.getPageNum();
        Integer pageSize = baseConstant.getPageSize();
        String goodsId = "";
        if(bodyMap != null)
        {
            goodsId = String.valueOf(bodyMap.get("goodsId"));
            String tempPageNum = String.valueOf(bodyMap.get("pageNum").toString());
            String tempPageSize = String.valueOf(bodyMap.get("pageSize").toString());
            if(!StringUtil.isNullOrBlank(tempPageNum))
            {
                pageNum = Integer.parseInt(tempPageNum);
            }
            if(!StringUtil.isNullOrBlank(tempPageSize))
            {
                pageSize = Integer.parseInt(tempPageSize);
            }
        }

        if(StringUtil.isNullOrBlank(goodsId))
        {
            return StringUtil.returnResponseVo(baseConstant.getErrorCode(),"查询拍卖出价记录不能为空","","","");
        }

        PageHelper.startPage(pageNum,pageSize);
        List<GoodsOfferRecord> offerRecords = offerRecordMapper.selectAllById(goodsId);
        PageInfo<GoodsOfferRecord> pageInfo = new PageInfo<>(offerRecords);
        return StringUtil.returnResponseVo(baseConstant.getRightCode(),"查询成功","","",pageInfo);
    }

    /**
     * @description 根据大小类数据封装对象
     * @method  getParentAndSmallList
     * @param  * @param list 大小类集合
     * @return java.util.List<cn.com.base.vo.auction.ParentClassIfication>
     * @date: 2018/3/30 15:46:18
     * @author:zhoujinbing
     */
    public List<ParentClassIfication> getParentAndSmallList(List<GoodsClassIfication> list)
    {
        List<ParentClassIfication> parentClassIficationsList = null;
        if(list != null && list.size() > 0)
        {
            parentClassIficationsList = new ArrayList<>();
            ParentClassIfication parentClassIfication = null;
            for(GoodsClassIfication classIfication :list)
            {
                //判断是否是大类
                if(classIfication.getParentCode().equals("0"))
                {
                    parentClassIfication = new ParentClassIfication();
                    parentClassIfication.setParentClassCode(classIfication.getParentCode());
                    parentClassIfication.setParentClassId(classIfication.getId());
                    parentClassIfication.setParentClassName(classIfication.getClassName());
                    //list.remove(classIfication);//移除当前元素

                    //获取当前当类中的小类
                    List<ChildClassIfication> childClassIficationsList = new ArrayList<>();
                    ChildClassIfication childClassIfication = null;
                    //判断大类中是否包含小类
                    for(GoodsClassIfication childClass : list)
                    {
                        if(childClass.getParentCode().equals(classIfication.getClassCode()))
                        {
                            childClassIfication = new ChildClassIfication();
                            childClassIfication.setClassCode(childClass.getClassCode());
                            childClassIfication.setClassId(childClass.getId());
                            childClassIfication.setClassName(childClass.getClassName());
                            childClassIfication.setPicUrl(childClass.getImageIds());
                            childClassIficationsList.add(childClassIfication);
                        }
                    }
                    parentClassIfication.setSmallClassList(childClassIficationsList);
                    parentClassIficationsList.add(parentClassIfication);

                }
            }
        }

        return parentClassIficationsList;
    }
}
