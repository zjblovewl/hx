<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.mobile.order.dao.OrderMobileMapper">
	<!-- 保存订单 -->
	<insert id="saveOrder" parameterType="java.util.HashMap">
		insert into hxdb.hx_order(id,order_code,buyer_id,buyer_name,seller_id,seller_name,order_type,pay_money,postage,pay_method,receive_address,
		consignee,contact_information,order_status,order_generation_time,remark,del_flag)
		values(#{order_id},#{order_code},#{buyer_id},#{buyer_name},#{seller_id},#{seller_name},#{order_type},#{pay_money},#{postage},#{pay_method},#{receive_address},
		#{consignee},#{contact_information},'1',now(),#{remark},'0')
	</insert>
	
	<!-- 保存订单商品 -->
	<insert id="saveOrderGoods" parameterType="java.util.HashMap">
		insert into hxdb.hx_order_goods(id,big_class_code,small_class_code,goods_type,goods_name,goods_description,amount,price,order_id,goods_id,create_time,del_flag)
		select #{order_goods_id},big_class_code,small_class_code,goods_type,goods_name,goods_description,#{amount},price,#{order_id},#{goods_id},now(),'0'
		from hxdb.hx_goods where id = #{goods_id}		
	</insert>
	
	<!-- 保存订单商品图片数据 -->
	<insert id="saveImagesOrderGoodsRel" parameterType="java.util.HashMap">
		<!-- hxdb.random_uuid(32) 0-9 a-z 随机生成的 32位  组合id -->
		insert into hxdb.hx_images_ordergoods_rel(id,image_id,service_id,sort)
		select hxdb.random_uuid(32),image_id,#{order_goods_id},sort from hxdb.hx_images_goods_rel where service_id = #{goods_id}
	</insert>
	
	<!-- 售出记录（已完成的订单） -->
	<select id="getSellOrderRecords" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select o.id as order_id,o.order_code,o.seller_id,o.seller_name,g.goods_name,g.amount,g.price,g.goods_id,o.pay_money,
		    hxdb.datestr_to_timestamp(to_char(o.order_generation_time,'YYYY-MM-DD HH24:MI:SS')) as order_generation_time,
		    COALESCE(t1.head_image_urls,'')as head_image_urls,
		    COALESCE(t.small_image_urls,'') as small_image_urls,
		    COALESCE(t.big_image_urls,'') as big_image_urls,
		    COALESCE(t.original_image_urls,'') as original_image_urls    
		 from hxdb.hx_order o
		left join hxdb.hx_order_goods g on g.order_id = o.id
		left join
		(		        
		    select re.service_id,string_agg(img.image1_url,',')as small_image_urls,string_agg(img.image3_url,',')as big_image_urls,string_agg(img.image_url,',') as original_image_urls 
		    from (select * from hxdb.hx_images_ordergoods_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t on t.service_id = g.id
		left join
		(
		    select re.service_id,string_agg(img.image1_url,',')as head_image_urls 
		    from (select * from hxdb.hx_images_user_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t1 on t1.service_id = o.seller_id
		<!-- 1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->
		where o.order_status = '5' and o.id||o.seller_id in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null) and o.seller_id = #{user_id} 
		order by o.order_generation_time desc
	</select>
	
	<!-- 购买记录（已完成的订单） -->
	<select id="getBuyOrderRecords" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select o.id as order_id,o.order_code,o.seller_id,o.seller_name,g.goods_name,g.amount,g.price,g.goods_id,o.pay_money,
		    hxdb.datestr_to_timestamp(to_char(o.order_generation_time,'YYYY-MM-DD HH24:MI:SS')) as order_generation_time,
		    COALESCE(t1.head_image_urls,'')as head_image_urls,
		    COALESCE(t.small_image_urls,'') as small_image_urls,
		    COALESCE(t.big_image_urls,'') as big_image_urls,
		    COALESCE(t.original_image_urls,'') as original_image_urls    
		 from hxdb.hx_order o
		left join hxdb.hx_order_goods g on g.order_id = o.id
		left join
		(		        
		    select re.service_id,string_agg(img.image1_url,',')as small_image_urls,string_agg(img.image3_url,',')as big_image_urls,string_agg(img.image_url,',') as original_image_urls 
		    from (select * from hxdb.hx_images_ordergoods_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t on t.service_id = g.id
		left join
		(
		    select re.service_id,string_agg(img.image1_url,',')as head_image_urls 
		    from (select * from hxdb.hx_images_user_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t1 on t1.service_id = o.seller_id
		<!-- 1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->
		where o.order_status = '5' and o.id||o.buyer_id in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null) and o.buyer_id = #{user_id}
		order by o.order_generation_time desc
	</select>
	
	<!-- 查询订单评论 -->
	<select id="getOrderEvaluateRecords" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select user_type,user_id,evaluate_level,evaluate_content from hxdb.hx_order_evaluate where order_id = #{order_id}
	</select>
	
	<!-- 我售出的 -->
	<select id="getMySellOrderRecords" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select o.id as order_id,o.order_code,o.order_status,o.seller_id,o.seller_name,g.goods_name,g.amount,g.price,g.goods_id,o.pay_money,	
			hxdb.datestr_to_timestamp(to_char(o.order_generation_time,'YYYY-MM-DD HH24:MI:SS')) as order_generation_time,    
		    COALESCE(t1.head_image_urls,'')as head_image_urls,
		    COALESCE(t.small_image_urls,'') as small_image_urls,
		    COALESCE(t.big_image_urls,'') as big_image_urls,
		    COALESCE(t.original_image_urls,'') as original_image_urls    
		 from hxdb.hx_order o
		left join hxdb.hx_order_goods g on g.order_id = o.id
		left join
		(		        
		    select re.service_id,string_agg(img.image1_url,',')as small_image_urls,string_agg(img.image3_url,',')as big_image_urls,string_agg(img.image_url,',') as original_image_urls 
		    from (select * from hxdb.hx_images_ordergoods_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t on t.service_id = g.id
		left join
		(
		    select re.service_id,string_agg(img.image1_url,',')as head_image_urls 
		    from (select * from hxdb.hx_images_user_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t1 on t1.service_id = o.seller_id
		where o.seller_id = #{user_id}
		<if test="order_status != null and order_status != '' and order_status != '100' and order_status != '50' and order_status != '51'">
			<!-- 1：待付款 2：待发货 3：待收货 5：已完成  50：已完成-待评价 51：已完成-已评价  6：待退款 7：已退款 8：取消订单  100：其他 -->
			and o.order_status = #{order_status}	
		</if>
		<if test="order_status != null and order_status != '' and order_status == '100'">
			and o.order_status in ('5','6','7','8')
		</if>
		<!-- 已完成-待评论 -->
		<if test="order_status != null and order_status != '' and order_status == '50'">
			and o.order_status = '5' and o.id||o.seller_id not in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null)
		</if>
		<!-- 已完成-已评论 -->
		<if test="order_status != null and order_status != '' and order_status == '51'">
			and o.order_status = '5' and o.id||o.seller_id in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null)
		</if>
		order by o.order_generation_time desc
	</select>
	
	<!-- 我购买的 -->
	<select id="getMyBuyOrderRecords" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select o.id as order_id,o.order_code,o.order_status,o.seller_id,o.seller_name,g.goods_name,g.amount,g.price,g.goods_id,o.pay_money,		
			hxdb.datestr_to_timestamp(to_char(o.order_generation_time,'YYYY-MM-DD HH24:MI:SS')) as order_generation_time,    
		    COALESCE(t1.head_image_urls,'')as head_image_urls,
		    COALESCE(t.small_image_urls,'') as small_image_urls,
		    COALESCE(t.big_image_urls,'') as big_image_urls,
		    COALESCE(t.original_image_urls,'') as original_image_urls    
		 from hxdb.hx_order o
		left join hxdb.hx_order_goods g on g.order_id = o.id
		left join
		(		        
		    select re.service_id,string_agg(img.image1_url,',')as small_image_urls,string_agg(img.image3_url,',')as big_image_urls,string_agg(img.image_url,',') as original_image_urls 
		    from (select * from hxdb.hx_images_ordergoods_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t on t.service_id = g.id
		left join
		(
		    select re.service_id,string_agg(img.image1_url,',')as head_image_urls 
		    from (select * from hxdb.hx_images_user_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t1 on t1.service_id = o.seller_id
		where o.buyer_id = #{user_id}
		<if test="order_status != null and order_status != '' and order_status != '100' and order_status != '50' and order_status != '51'">
			<!-- 1：待付款 2：待发货 3：待收货 5：已完成  50：已完成-待评价 51：已完成-已评价  6：待退款 7：已退款 8：取消订单  100：其他 -->
			and o.order_status = #{order_status}	
		</if>
		<if test="order_status != null and order_status != '' and order_status == '100'">
			and o.order_status in ('5','6','7','8')
		</if>
		<!-- 已完成-待评论 -->
		<if test="order_status != null and order_status != '' and order_status == '50'">
			and o.order_status = '5' and o.id||o.buyer_id not in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null)
		</if>
		<!-- 已完成-已评论 -->
		<if test="order_status != null and order_status != '' and order_status == '51'">
			and o.order_status = '5' and o.id||o.buyer_id in(select order_id||user_id from hxdb.hx_order_evaluate where order_id is not null and user_id is not null)
		</if>
		order by o.order_generation_time desc
	</select>
	
	<!-- 查询订单详情 -->
	<select id="getOrderInfoById" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select o.id as order_id,o.order_code,o.order_status,o.logistics_company,o.logistics_code,o.consignee,o.receive_address,
		o.remark,o.postage,o.pay_money,seller_id,seller_name,og.goods_name,og.goods_description,og.amount,og.price,
		hxdb.datestr_to_timestamp(to_char(o.order_generation_time,'YYYY-MM-DD HH24:MI:SS')) as order_generation_time,    
		hxdb.datestr_to_timestamp(to_char(o.order_pay_time,'YYYY-MM-DD HH24:MI:SS')) as order_pay_time,    
		hxdb.datestr_to_timestamp(to_char(o.order_finish_time,'YYYY-MM-DD HH24:MI:SS')) as order_finish_time,
		hxdb.datestr_to_timestamp(to_char(o.send_time,'YYYY-MM-DD HH24:MI:SS')) as send_time,
		hxdb.datestr_to_timestamp(to_char(o.apply_refund_time,'YYYY-MM-DD HH24:MI:SS')) as apply_refund_time,    	
		hxdb.datestr_to_timestamp(to_char(o.confirm_refund_time,'YYYY-MM-DD HH24:MI:SS')) as confirm_refund_time,
		hxdb.datestr_to_timestamp(to_char(o.cancel_time,'YYYY-MM-DD HH24:MI:SS')) as cancel_time,    
		hxdb.datestr_to_timestamp(to_char(now(),'YYYY-MM-DD HH24:MI:SS')) as current_time,			    						
		COALESCE(t.small_image_urls,'') as small_image_urls,
		COALESCE(t.big_image_urls,'') as big_image_urls,
		COALESCE(t.original_image_urls,'') as original_image_urls, 
		COALESCE(t1.head_image_urls,'') as head_image_urls
		from hxdb.hx_order o
		left join hxdb.hx_order_goods og on og.order_id = o.id
		left join
		(		        
		    select re.service_id,string_agg(img.image1_url,',')as small_image_urls,string_agg(img.image3_url,',')as big_image_urls,string_agg(img.image_url,',') as original_image_urls 
		    from (select * from hxdb.hx_images_ordergoods_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t on t.service_id = og.id
		left join
		(
		    select re.service_id,string_agg(img.image1_url,',')as head_image_urls 
		    from (select * from hxdb.hx_images_user_rel order by sort asc) re
		    left join hxdb.sys_images img on img.id = re.image_id
		    group by re.service_id 	
		)t1 on t1.service_id = o.seller_id
		where o.id = #{order_id}	
	</select>
	
	<!-- 发货 -->
	<update id="sendOutGoods" parameterType="java.util.HashMap">
		<!-- 1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->
		update hxdb.hx_order set logistics_company = #{logistics_company},logistics_code = #{logistics_code},order_status = '3',send_time = now() where id = #{order_id}		
	</update>
	
	<!-- 订单评价 -->
	<insert id="saveOrderEvaluate" parameterType="java.util.HashMap">
		insert into hxdb.hx_order_evaluate(id,user_type,user_id,order_id,evaluate_level,evaluate_content,create_time,update_time)
		values(#{uuid},#{user_type},#{user_id},#{order_id},#{evaluate_level},#{evaluate_content},now(),now())
	</insert>
	
	<!-- 取消订单 -->
	<update id="cancelOrder" parameterType="java.util.HashMap">
		<!-- 1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->
		update hxdb.hx_order set order_status = '8',cancel_reason = #{cancel_reason},cancel_time = now() where id = #{order_id}
	</update>
	
	<!-- 确认收货 -->
	<update id="confirmCollectGoods" parameterType="java.util.HashMap">
		<!-- 1：待付款 2：待发货 3：待收货  5：已完成 6：待退款 7：已退款 8：取消订单 -->
		update hxdb.hx_order set order_status = '5' where id = #{order_id}
	</update>
	
	<!-- 申请退款 -->
	<update id="applyRefund" parameterType="java.util.HashMap">
		<!-- 1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->
		update hxdb.hx_order set order_status = '6',refund_reason = #{refund_reason},apply_refund_time = now() where id = #{order_id} 
	</update>
	
	<!-- 同意退款 -->
	<update id="agreeRefund" parameterType="java.util.HashMap">
		update hxdb.hx_order set order_status = '7',confirm_refund_time = now() where id = #{order_id}
	</update>
	
	<!-- 根据订单号更新订单状态 -->
	<update id="updateOrderStatusByOrderCode" parameterType="java.util.HashMap">
		update hxdb.hx_order set order_status = #{order_status}
		<!--  1：待付款 2：待发货 3：待收货 4：待评论 5：已完成 6：待退款 7：已退款 8：取消订单 -->		
		<if test="order_status == 2">
			,order_pay_time = now()<!-- 支付时间 -->
		</if>
		 where order_code = #{order_code}
	</update>
	
	<!-- 根据订单状态查询订单信息 -->
	<select id="getOrderRecordsByStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select id,order_code,order_status,order_generation_time,send_time from hxdb.hx_order where order_status = #{order_status}
	</select>
	
	<!-- 查询待支付订单,超时未付款(超时30分钟) -->
	<select id="getOvertimeUnPayOrderRecords" resultType="java.util.HashMap">
		select id as order_id,order_code,order_status,order_generation_time,send_time from hxdb.hx_order 
		where order_status = '1' and now() > (order_generation_time + (30 || ' min')::"interval") 
	</select>
	
	<!-- 查询待收货订单,超时未确认收货(超时10天) -->
	<select id="getOvertimeUnReceiveOrderRecords" resultType="java.util.HashMap">
		select id as order_id,order_code,order_status,order_generation_time,send_time from hxdb.hx_order 
		where order_status = '3' and now() > (send_time + (10 || ' D')::"interval")
	</select>
	
	<!-- 批量取消订单 -->
	<update id="batchCancelOrder">
		update hxdb.hx_order set order_status = '8'
        where order_code in(
        	select order_code from hxdb.hx_order where order_status = '1' and now() > (order_generation_time + (30 || ' min')::"interval")
		) 
	</update>
	
	<!-- 批量确认收货订单 -->
	<update id="batchConfirmCollectGoods">
		update hxdb.hx_order set order_status = '5'		
        where order_code in(
        	select order_code from hxdb.hx_order where order_status = '3' and now() > (send_time + (10 || ' D')::"interval")
        )  
	</update>
	
	<!-- 根据订单id查询商品库存信息 -->
	<select id="getGoodsInventoryByOrderId" parameterType="java.util.HashMap" resultType="java.util.HashMap">		
		select og.goods_id,og.amount,g.inventory from hxdb.hx_order_goods og
		left join hxdb.hx_goods g on g.id = og.goods_id
		where og.order_id = (select id from hxdb.hx_order where order_code = #{order_code})
	</select>
	
	<!-- 支付成功减库存 -->
	<update id="updateGoodsInventory" parameterType="java.util.HashMap">		
		update hxdb.hx_goods set inventory = inventory - #{amount} where id = #{goods_id}
	</update>
</mapper>