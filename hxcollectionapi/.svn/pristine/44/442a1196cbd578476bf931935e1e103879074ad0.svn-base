package cn.com.mobile.auction.service.impl;

import cn.com.base.util.StringUtil;
import cn.com.base.vo.RequestParamVo;
import cn.com.base.vo.ResponseParamVo;
import cn.com.base.vo.auction.ChildClassIfication;
import cn.com.base.vo.auction.ParentClassIfication;
import cn.com.mobile.auction.dao.GoodsClassIficationMapper;
import cn.com.mobile.auction.service.AuctionMobileService;
import cn.com.model.auction.GoodsClassIfication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @类功能说明：拍卖业务实现层
 * @公司名称：南京华讯方舟通讯设备有限公司
 * @作者：zhoujinbing
 * @创建时间：2018/3/30 上午9:23
 * @版本：V1.0
 */
@Service
public class AuctionMobileServiceImpl implements AuctionMobileService {

    private static final Logger log = LoggerFactory.getLogger(AuctionMobileServiceImpl.class);

    @Autowired
    private GoodsClassIficationMapper goodsClassIficationMapper;

    @Override
    public ResponseParamVo getSizeOfClass(RequestParamVo vo) {
        try{
            Map<String,Object> bodyMap = (Map<String, Object>) vo.getBody();
            String classType = bodyMap.get("classType").toString();
            log.info("查询大小类类型为：{}",classType);
            if(!StringUtil.isNullOrBlank(classType))
            {
                List<GoodsClassIfication> lists = goodsClassIficationMapper.selectListByClassType(classType);
                if(lists != null && lists.size() > 0)
                {
                    List<ParentClassIfication> parentClassIficationsList = getParentAndSmallList(lists);
                    Map<String,Object> resultMap = new HashMap<>();
                    resultMap.put("data",parentClassIficationsList);
                    return StringUtil.returnResponseVo(200,"查询成功","","",resultMap);
                }
                else
                {
                    return StringUtil.returnResponseVo(400,"大小类暂无数据","","","");
                }
            }
            else
            {
                return StringUtil.returnResponseVo(400,"查询大小类类型为空","","","");
            }
        }catch (Exception e)
        {
            log.error("查询大小类时异常",e.getMessage());
            return StringUtil.returnResponseVo(400,"查询大小类异常","","","");
        }
    }

    /**
     * @description 根据大小类数据封装对象
     * @method  getParentAndSmallList
     * @param  * @param list 大小类集合
     * @return java.util.List<cn.com.base.vo.auction.ParentClassIfication>
     * @date: 2018/3/30 15:46:18
     * @author:zhoujinbing
     */
    public List<ParentClassIfication> getParentAndSmallList(List<GoodsClassIfication> list)
    {
        List<ParentClassIfication> parentClassIficationsList = null;
        if(list != null && list.size() > 0)
        {
            parentClassIficationsList = new ArrayList<>();
            ParentClassIfication parentClassIfication = null;
            for(GoodsClassIfication classIfication :list)
            {
                //判断是否是大类
                if(classIfication.getParentCode().equals("0"))
                {
                    parentClassIfication = new ParentClassIfication();
                    parentClassIfication.setParentClassCode(classIfication.getParentCode());
                    parentClassIfication.setParentClassId(classIfication.getId());
                    parentClassIfication.setParentClassName(classIfication.getClassName());
                    //list.remove(classIfication);//移除当前元素

                    //获取当前当类中的小类
                    List<ChildClassIfication> childClassIficationsList = new ArrayList<>();
                    ChildClassIfication childClassIfication = null;
                    //判断大类中是否包含小类
                    for(GoodsClassIfication childClass : list)
                    {
                        if(childClass.getParentCode().equals(classIfication.getClassCode()))
                        {
                            childClassIfication = new ChildClassIfication();
                            childClassIfication.setClassCode(childClass.getClassCode());
                            childClassIfication.setClassId(childClass.getId());
                            childClassIfication.setClassName(childClass.getClassName());
                            childClassIfication.setPicUrl(childClass.getImageIds());
                            childClassIficationsList.add(childClassIfication);
                        }
                    }
                    parentClassIfication.setSmallClassList(childClassIficationsList);
                    parentClassIficationsList.add(parentClassIfication);

                }
            }
        }

        return parentClassIficationsList;
    }
}
